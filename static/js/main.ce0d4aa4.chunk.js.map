{"version":3,"sources":["img/home/character.jpg","img/home/films.jpg","img/home/planets.jpg","img/home/species.jpg","img/home/starships.jpg","img/home/vehicles.jpg","component/header/Header.js","component/card/CardCategory.js","component/footer/Footer.js","App.js","serviceWorker.js","api/baseApi.js","api/Api.js","component/loading/Loading.js","component/pagination/Pagination.js","img/films/imgFilms.js","component/film/Films.js","component/pagination/ApiPagination.js","component/planets/Planets.js","component/people/People.js","component/species/Species.js","component/Vehicles/Vehicles.js","component/starship/Starships.js","component/pageNotFound/PageNotFound.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","this","props","category","React","Component","CardCategory","src","alt","name","Footer","href","App","Fragment","header_Header","Link","to","card_CardCategory","character","films","species","starships","vehicles","planets","footer_Footer","Boolean","window","location","hostname","match","get","url","arguments","length","undefined","fetch","then","response","json","getAll","_ref2","Object","asyncToGenerator","regenerator_default","mark","_callee","_ref","pathName","page","urlParams","wrap","_context","prev","next","URLSearchParams","set","abrupt","concat","toString","stop","_x","apply","Loading","Pagination","images","1","Films","state","isLoaded","loadData","_this","dataApi","sent","results","setState","updatePageFromUrl","console","log","map","img","_this$state","pagination_Pagination","film","key","title","episode_id","director","release_date","loading_Loading","withRouter","count","_ref$perPage","perPage","pagesCount","Math","ceil","pages","i","push","getSearchWithPage","search","pathname","Planets","pagination_ApiPagination","planet","diameter","climate","gravity","terrain","surface_water","population","People","people","person","birth_year","gender","height","mass","Species","specie","classification","average_height","average_lifespan","language","Vehicles","model","manufacturer","crew","vehicle_class","Starship","starship","starship_clas","PageNotFound","ReactDOM","render","BrowserRouter","basename","process","Switch","Route","exact","path","component","Starships","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce0d4aa4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/character.33022f18.jpg\";","module.exports = __webpack_public_path__ + \"static/media/films.03a9a1af.jpg\";","module.exports = __webpack_public_path__ + \"static/media/planets.d28c9986.jpg\";","module.exports = __webpack_public_path__ + \"static/media/species.469d9d37.jpg\";","module.exports = __webpack_public_path__ + \"static/media/starships.19706559.jpg\";","module.exports = __webpack_public_path__ + \"static/media/vehicles.788b92b8.jpg\";","import React from \"react\";\r\n\r\nclass Header extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"header\">\r\n        <div className=\"logo\">\r\n          <p>Star Wars</p>\r\n        </div>\r\n          <div>\r\n              <p>{this.props.category}</p>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nclass CardCategory extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"card\">\r\n                <img src={this.props.src} alt=\"card\"/>\r\n                <span className=\"category_text\">{this.props.name}</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CardCategory;","import React from \"react\";\r\n\r\nclass Footer extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"footer\">\r\n                <img src=\"http://www.antonsetiawan.com/images/github10-inverse.png\" alt=\"qwe\" className=\"github\"/>\r\n                <a href=\"https://github.com/\"> <p>GitHub</p></a>\r\n                <p className=\"dev_name\"> Developed by Vitalik Diadychko</p>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./App.css\";\n\nimport Header from \"./component/header/Header\";\nimport CardCategory from \"./component/card/CardCategory\";\nimport Footer from \"./component/footer/Footer\";\n\nimport character from './img/home/character.jpg'\nimport films from './img/home/films.jpg'\nimport planets from './img/home/planets.jpg'\nimport species from './img/home/species.jpg'\nimport starships from './img/home/starships.jpg'\nimport vehicles from './img/home/vehicles.jpg'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <>\n        <Header category=\"A VISUAL GUIDE\"/>\n        <div>\n          <div className=\"app\">\n            <Link to=\"/people\">\n              <CardCategory name=\"Character\" src={character} />\n            </Link>\n            <Link to=\"/films\">\n              <CardCategory name=\"Film\" src={films} />\n            </Link>\n            <Link to=\"/species\">\n              <CardCategory name=\"Species\" src={species} />\n            </Link>\n            <Link to=\"/starships\">\n              <CardCategory name=\"Starships\" src={starships} />\n            </Link>\n            <Link to=\"/vehicles\">\n              <CardCategory name=\"Vehicles\" src={vehicles} />\n            </Link>\n            <Link to=\"/planets\">\n              <CardCategory name=\"Planets\" src={planets} />\n            </Link>\n          </div>\n        </div>\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const BASE_API_URL = \"https://swapi.co/api/\";\r\n\r\nexport const get =  (url, params = {}) => {\r\n    return fetch(BASE_API_URL + url)\r\n        .then(response => response.json())\r\n}","import {get} from './baseApi'\r\n\r\nexport const getAll = async ({pathName, page}) => {\r\n    const urlParams = new URLSearchParams();\r\n\r\n    urlParams.set('page', page);\r\n    return get(`${pathName}?${urlParams.toString()}`)\r\n};\r\n\r\nexport const getById = async (personId) => {\r\n    return get(`people/${personId}`)\r\n};\r\n\r\n","import React from \"react\";\r\nimport Header from \"../header/Header\";\r\nimport Footer from \"../footer/Footer\";\r\n\r\nclass Loading extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Header />\r\n        <div className=\"loading\">\r\n\r\n\r\n\r\n        </div>\r\n        <Footer />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Loading;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nclass Pagination extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"pagination\">\r\n                <Link to=\"/\">\r\n                    <p>Home</p>\r\n                </Link>\r\n                <span>/</span>\r\n                <p>{this.props.page}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pagination;","const images = [\r\n    {  1 : './img/films/1.jpg'  },\r\n\r\n\r\n];\r\n\r\n\r\n\r\nexport default images;","import React from \"react\";\r\nimport Header from \"../header/Header\";\r\nimport Footer from \"../footer/Footer\";\r\n\r\nimport * as dataApi from \"../../api/Api\";\r\n\r\nimport Loading from \"../loading/Loading\";\r\nimport Pagination from \"../pagination/Pagination\";\r\n\r\nimport images from \"../../img/films/imgFilms\"\r\nclass Films extends React.Component {\r\n  state = {\r\n    pathName: \"films\",\r\n    isLoaded: false,\r\n    page: 0,\r\n    films: [],\r\n  };\r\n\r\n\r\n  componentDidMount() {\r\n    this.updatePageFromUrl();\r\n  }\r\n\r\n  updatePageFromUrl() {\r\n    const page = 1;\r\n\r\n    this.setState({ page }, this.loadData);\r\n  }\r\n\r\n  loadData = async () => {\r\n\r\n    const { pathName } = this.state;\r\n    const { page } = this.state;\r\n    const { results: films } = await dataApi.getAll({ pathName, page });\r\n\r\n    this.setState({\r\n      films,\r\n      isLoaded: true\r\n    });\r\n  };\r\n\r\n  render() {\r\n    console.log(images.map(img =>(\r\n        img[1]\r\n    )));\r\n    const { films, isLoaded } = this.state;\r\n    return (\r\n      <>\r\n        {isLoaded ? (\r\n          <>\r\n            <Header />\r\n\r\n              <Pagination page=\"Films\"/>\r\n\r\n\r\n            <div className=\"dataList\">\r\n              {films.map(film => (\r\n                <div key={film.title} className=\"films\">\r\n\r\n                  <img src={images.map(img =>(\r\n                      img[1]\r\n                  ))} alt={film.title}/>\r\n                  <p>Name: {film.title}</p>\r\n                  <p>Name: {film.episode_id}</p>\r\n                  <p>Name: {film.director}</p>\r\n                  <p>Name: {film.release_date}</p>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <Footer />\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Loading />\r\n          </>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Films;\r\n","import React from \"react\";\r\n\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ApiPagination = ({ location, count, page = 1, perPage = 10 }) => {\r\n  const pagesCount = Math.ceil(count / perPage);\r\n  const pages = [];\r\n\r\n  for (let i = 0; i < pagesCount; i++) {\r\n    pages.push(i + 1);\r\n  }\r\n\r\n  const getSearchWithPage = page => {\r\n    const urlParams = new URLSearchParams(location.search);\r\n\r\n    urlParams.set(\"page\", page);\r\n\r\n    return urlParams.toString();\r\n  };\r\n\r\n  return (\r\n    <div className=\"apiPagination\">\r\n      {pages.map(page => (\r\n        <Link\r\n          key={page}\r\n          to={{\r\n            pathname: location.pathname,\r\n            search: getSearchWithPage(page)\r\n          }}\r\n        >\r\n          {page}\r\n        </Link>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\nApiPagination.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  page: PropTypes.number,\r\n  perPage: PropTypes.number\r\n};\r\n\r\nexport default withRouter(ApiPagination);\r\n","import * as dataApi from \"../../api/Api\";\r\nimport ApiPagination from \"../pagination/ApiPagination\";\r\nimport Loading from \"../loading/Loading\";\r\nimport Header from \"../header/Header\";\r\nimport Footer from \"../footer/Footer\";\r\n\r\n\r\nimport Pagination from \"../pagination/Pagination\";\r\nimport React from \"react\";\r\n\r\n\r\n\r\nclass Planets extends React.Component {\r\n    state = {\r\n        pathName: 'planets',\r\n        isLoaded: false,\r\n        page: 0,\r\n        count: 0,\r\n        planets: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.updatePageFromUrl();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.updatePageFromUrl();\r\n    }\r\n\r\n    updatePageFromUrl() {\r\n        const { location } = this.props;\r\n        const urlParams = new URLSearchParams(location.search);\r\n        const page = +urlParams.get(\"page\") || 1;\r\n\r\n        if (page === this.state.page) {\r\n            return;\r\n        } else {\r\n            this.setState({ page }, this.loadData);\r\n        }\r\n    }\r\n\r\n    loadData = async () => {\r\n        const {pathName} = this.state;\r\n        const { page } = this.state;\r\n        const { count, results: planets } = await dataApi.getAll({ pathName , page });\r\n\r\n        this.setState({\r\n            planets,\r\n            count,\r\n            isLoaded: true\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { planets, isLoaded, count, page } = this.state;\r\n        return (\r\n            <>\r\n                {isLoaded ? (\r\n                    <>\r\n                        <Header category=\"Planets\"/>\r\n                        <div className=\"nav\">\r\n                            <Pagination page=\"Planets\"/>\r\n                            <ApiPagination count={count} page={page} />\r\n                        </div>\r\n                        <div className=\"dataList\">\r\n                            {planets.map(planet => (\r\n                                <div key={planet.name} className=\"planets\">\r\n                                    <img src=\"\" alt={planet.name}/>\r\n                                    <p>Name: {planet.name}</p>\r\n                                    <p>Diameter: {planet.diameter}</p>\r\n                                    <p>Climate: {planet.climate}</p>\r\n                                    <p>Gravity: {planet.gravity}</p>\r\n                                    <p>Terrain: {planet.terrain}</p>\r\n                                    <p>Surface water: {planet.surface_water}</p>\r\n                                    <p>Population: {planet.population}</p>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <Footer/>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Loading />\r\n                    </>\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Planets;","import React from \"react\";\r\n\r\nimport * as dataApi from \"../../api/Api\";\r\nimport ApiPagination from \"../pagination/ApiPagination\";\r\nimport Loading from \"../loading/Loading\";\r\nimport Header from \"../header/Header\";\r\nimport Footer from \"../footer/Footer\";\r\n\r\n\r\nimport Pagination from \"../pagination/Pagination\";\r\n\r\n\r\nclass People extends React.Component {\r\n  state = {\r\n    pathName: 'people',\r\n    isLoaded: false,\r\n    page: 0,\r\n    count: 0,\r\n    people: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.updatePageFromUrl();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.updatePageFromUrl();\r\n  }\r\n\r\n  updatePageFromUrl() {\r\n    const { location } = this.props;\r\n    const urlParams = new URLSearchParams(location.search);\r\n    const page = +urlParams.get(\"page\") || 1;\r\n\r\n    if (page === this.state.page) {\r\n      return;\r\n    } else {\r\n      this.setState({ page }, this.loadData);\r\n    }\r\n  }\r\n\r\n  loadData = async () => {\r\n    const {pathName} = this.state;\r\n    const { page } = this.state;\r\n    const { count, results: people } = await dataApi.getAll({ pathName , page });\r\n\r\n    this.setState({\r\n      people,\r\n      count,\r\n      isLoaded: true\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { people, isLoaded, count, page } = this.state;\r\n    return (\r\n      <>\r\n        {isLoaded ? (\r\n          <>\r\n            <Header category=\"Character\"/>\r\n            <div className='nav'>\r\n              <Pagination page=\"Character\"/>\r\n              <ApiPagination count={count} page={page} />\r\n            </div>\r\n            <div className=\"dataList\">\r\n              {people.map(person => (\r\n                <div key={person.name} className=\"people\">\r\n                  <img src='../../img/people/1.jpg' alt={person.name} />\r\n                  <p>Name: {person.name}</p>\r\n                  <p>Birth Year: {person.birth_year}</p>\r\n                  <p>Gender: {person.gender}</p>\r\n                  <p>Height: {person.height}</p>\r\n                  <p>Weight: {person.mass}</p>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <Footer/>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Loading />\r\n          </>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default People;\r\n","import React from \"react\";\r\nimport * as dataApi from \"../../api/Api\";\r\nimport ApiPagination from \"../pagination/ApiPagination\";\r\nimport Loading from \"../loading/Loading\";\r\nimport Header from \"../header/Header\";\r\nimport Footer from \"../footer/Footer\";\r\nimport Pagination from \"../pagination/Pagination\";\r\n\r\n\r\n\r\n\r\nclass Species extends React.Component {\r\n    state = {\r\n        pathName: 'species',\r\n        isLoaded: false,\r\n        page: 0,\r\n        count: 0,\r\n        species: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.updatePageFromUrl();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.updatePageFromUrl();\r\n    }\r\n\r\n    updatePageFromUrl() {\r\n        const { location } = this.props;\r\n        const urlParams = new URLSearchParams(location.search);\r\n        const page = +urlParams.get(\"page\") || 1;\r\n\r\n        if (page === this.state.page) {\r\n            return;\r\n        } else {\r\n            this.setState({ page }, this.loadData);\r\n        }\r\n    }\r\n\r\n    loadData = async () => {\r\n        const {pathName} = this.state;\r\n        const { page } = this.state;\r\n        const { count, results: species } = await dataApi.getAll({ pathName , page });\r\n\r\n        this.setState({\r\n            species,\r\n            count,\r\n            isLoaded: true\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { species, isLoaded, count, page } = this.state;\r\n        return (\r\n            <>\r\n                {isLoaded ? (\r\n                    <>\r\n                        <Header category=\"Species\"/>\r\n                        <div className='nav'>\r\n                            <Pagination page=\"Species\"/>\r\n                            <ApiPagination count={count} page={page} />\r\n                        </div>\r\n                        <div className=\"dataList\">\r\n                            {species.map(specie => (\r\n                                <div key={specie.name} className=\"species\">\r\n                                    <img src=\"\" alt={specie.name}/>\r\n                                    <p>Name: {specie.name}</p>\r\n                                    <p>Classification: {specie.classification}</p>\r\n                                    <p>Average height: {specie.average_height}</p>\r\n                                    <p>Average lifespan: {specie.average_lifespan}</p>\r\n                                    <p>Language: {specie.language}</p>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <Footer/>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Loading />\r\n                    </>\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Species;","import React from \"react\";\r\nimport * as dataApi from \"../../api/Api\";\r\nimport ApiPagination from \"../pagination/ApiPagination\";\r\nimport Loading from \"../loading/Loading\";\r\nimport Header from \"../header/Header\";\r\nimport Footer from \"../footer/Footer\";\r\nimport Pagination from \"../pagination/Pagination\";\r\n\r\n\r\n\r\n\r\nclass Vehicles extends React.Component {\r\n  state = {\r\n    pathName: 'vehicles',\r\n    isLoaded: false,\r\n    page: 0,\r\n    count: 0,\r\n    vehicles: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.updatePageFromUrl();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.updatePageFromUrl();\r\n  }\r\n\r\n  updatePageFromUrl() {\r\n    const { location } = this.props;\r\n    const urlParams = new URLSearchParams(location.search);\r\n    const page = +urlParams.get(\"page\") || 1;\r\n\r\n    if (page === this.state.page) {\r\n      return;\r\n    } else {\r\n      this.setState({ page }, this.loadData);\r\n    }\r\n  }\r\n\r\n  loadData = async () => {\r\n    const {pathName} = this.state;\r\n    const { page } = this.state;\r\n    const { count, results: vehicles } = await dataApi.getAll({ pathName , page });\r\n\r\n    this.setState({\r\n      vehicles,\r\n      count,\r\n      isLoaded: true\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { vehicles, isLoaded, count, page } = this.state;\r\n    return (\r\n        <>\r\n          {isLoaded ? (\r\n              <>\r\n                <Header category=\"Species\"/>\r\n                <div className='nav'>\r\n                  <Pagination page=\"Species\"/>\r\n                  <ApiPagination count={count} page={page} />\r\n                </div>\r\n\r\n                <div className=\"dataList\">\r\n                  {vehicles.map(vehicles => (\r\n                      <div key={vehicles.name} className=\"starships\">\r\n                        <img src=\"\" alt={vehicles.name} />\r\n                        <p>Name: {vehicles.name}</p>\r\n                        <p>Model: {vehicles.model}</p>\r\n                        <p>Manufacturer: {vehicles.manufacturer}</p>\r\n                        <p>Length: {vehicles.length}</p>\r\n                        <p>Crew: {vehicles.crew}</p>\r\n                        <p>Vehicle class: {vehicles.vehicle_class}</p>\r\n                      </div>\r\n                  ))}\r\n                </div>\r\n                <Footer/>\r\n              </>\r\n          ) : (\r\n              <>\r\n                <Loading />\r\n              </>\r\n          )}\r\n        </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Vehicles;\r\n","import React from \"react\";\r\nimport * as dataApi from \"../../api/Api\";\r\nimport ApiPagination from \"../pagination/ApiPagination\";\r\nimport Loading from \"../loading/Loading\";\r\nimport Header from \"../header/Header\";\r\nimport Footer from \"../footer/Footer\";\r\nimport Pagination from \"../pagination/Pagination\";\r\n\r\n\r\n\r\n\r\nclass Starship extends React.Component {\r\n    state = {\r\n        pathName: 'starships',\r\n        isLoaded: false,\r\n        page: 0,\r\n        count: 0,\r\n        starships: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.updatePageFromUrl();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.updatePageFromUrl();\r\n    }\r\n\r\n    updatePageFromUrl() {\r\n        const { location } = this.props;\r\n        const urlParams = new URLSearchParams(location.search);\r\n        const page = +urlParams.get(\"page\") || 1;\r\n\r\n        if (page === this.state.page) {\r\n            return;\r\n        } else {\r\n            this.setState({ page }, this.loadData);\r\n        }\r\n    }\r\n\r\n    loadData = async () => {\r\n        const {pathName} = this.state;\r\n        const { page } = this.state;\r\n        const { count, results: starships } = await dataApi.getAll({ pathName , page });\r\n\r\n        this.setState({\r\n            starships,\r\n            count,\r\n            isLoaded: true\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { starships, isLoaded, count, page } = this.state;\r\n        return (\r\n            <>\r\n                {isLoaded ? (\r\n                    <>\r\n                        <Header category=\"Starships \"/>\r\n                        <div className='nav'>\r\n                            <Pagination page=\"Starships \"/>\r\n                            <ApiPagination count={count} page={page} />\r\n                        </div>\r\n                        <div className=\"dataList\">\r\n                            {starships.map(starship => (\r\n                                <div key={starship.name} className=\"starships\">\r\n                                    <img src=\"\" alt={starship.name} />\r\n                                    <p>Name: {starship.name}</p>\r\n                                    <p>Model: {starship.model}</p>\r\n                                    <p>Manufacturer: {starship.manufacturer}</p>\r\n                                    <p>Length: {starship.length}</p>\r\n                                    <p>Crew: {starship.crew}</p>\r\n                                    <p>Starship class: {starship.starship_clas}</p>\r\n\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <Footer/>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Loading />\r\n                    </>\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Starship ;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst PageNotFound = () => (\r\n  <>\r\n    <div className=\"pageNotFound\">\r\n      <Link to=\"/\">\r\n        <p>Come back home</p>\r\n      </Link>\r\n      <p>404</p>\r\n    </div>\r\n  </>\r\n);\r\n\r\nexport default PageNotFound;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Films from \"./component/film/Films\";\nimport Planets from \"./component/planets/Planets\";\nimport People from \"./component/people/People\";\nimport Species from \"./component/species/Species\";\nimport Vehicles from \"./component/Vehicles/Vehicles\";\nimport Starships from \"./component/starship/Starships\";\nimport PageNotFound from \"./component/pageNotFound/PageNotFound\";\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nconst Root = () => (\n    <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n            <Route exact path=\"/\" component={App} />\n            <Route path=\"/films\" component={Films} />\n            <Route path=\"/planets\" component={Planets} />\n            <Route path=\"/people\" component={People} />\n            <Route path=\"/species\" component={Species} />\n            <Route path=\"/vehicles\" component={Vehicles} />\n            <Route path=\"/starships\" component={Starships} />\n            <Route render={PageNotFound} />\n        </Switch>\n    </Router>\n);\n\nReactDOM.render(\n\n    <Root />,\n\n    document.getElementById('root'\n    ));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}